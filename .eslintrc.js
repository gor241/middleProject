module.exports = {
    // Определяет среды, в которых выполняется код.
    // Это помогает ESLint знать, какие глобальные переменные доступны.
    env: {
        browser: true, // Указывает, что код выполняется в браузере..
        es2021: true, // Включает поддержку синтаксиса ECMAScript 2021.
        jest: true, // Включает поддержку тестов
    },
    // Определяет базовые настройки, которые будут расширены.
    extends: [
        'plugin:react/recommended', // Включает рекомендованные правила для React из плагина eslint-plugin-react.
        'airbnb', // Включает правила стиля и кода от Airbnb. Обычно это требование к стилю кода и лучшим практикам.
        'plugin:i18next/recommended',
    ],
    // Указывает парсер для TypeScript, чтобы ESLint мог анализировать и проверять код TypeScript.
    parser: '@typescript-eslint/parser',
    // Опции для парсера, указывающие на особенности кода, которые должен поддерживать парсер.
    parserOptions: {
        ecmaFeatures: {
            jsx: true, // Включает поддержку JSX-синтаксиса, который используется в React.
        },
        ecmaVersion: 'latest', // Указывает, что нужно использовать последнюю доступную версию ECMAScript.
        sourceType: 'module', // Указывает, что код использует модули ES (import/export).
    },
    // Список плагинов, которые расширяют функциональность ESLint.
    plugins: [
        'react', // Плагин для проверки кода React.
        '@typescript-eslint', // Плагин для проверки кода TypeScript.
    ],
    // Настройка правил ESLint. Правила можно включить, выключить или настроить.
    rules: {
        'react/jsx-indent': [2, 4], // Правило для установки отступов внутри JSX на 4 пробела. Уровень 2 означает ошибку.
        'react/jsx-indent-props': [2, 4], // Правило для установки отступов внутри пропсов JSX на 4 пробела.
        indent: [2, 4], // Правило для установки отступов в коде на 4 пробела.
        'react/jsx-filename-extension': [
            2,
            { extensions: ['.js', '.jsx', '.tsx'] },
        ], // Позволяет использовать JSX в файлах с расширениями .js, .jsx и .tsx.
        'import/no-unresolved': 'off', // Отключает проверку на несоответствие импортов.
        'import/prefer-default-export': 'off', // Отключает правило, которое требует использования экспортов по умолчанию.
        'no-unused-vars': 'warn', // Устанавливает предупреждение для неиспользуемых переменных.
        'react/require-default-props': 'off', // Отключает требование установки значения по умолчанию для пропсов в React.
        'react/react-in-jsx-scope': 'off', // Отключает правило, требующее, чтобы React был в области видимости JSX.
        'react/jsx-props-no-spreading': 'warn', // Устанавливает предупреждение для распространения пропсов в JSX (практика, которую некоторые могут избегать).
        'react/function-component-definition': 'off', // Отключает правило, требующее определение функциональных компонентов в React определенным способом.
        'no-shadow': 'off', // Отключает правило, предотвращающее переопределение переменных в области видимости.
        'import/extensions': 'off', // Отключает правило, требующее указывать расширение файла в импортах.
        'import/no-extraneous-dependencies': 'off', // Отключает правило, предотвращающее использование зависимостей, не указанных в package.json.
        'no-underscore-dangle': 'off', // Отключает правило, запрещающее использование подчёркиваний в именах переменных.
        'react/button-has-type': 'off', // Отключает правило, указывать кнопке обязательные атрибут type
        'i18next/no-literal-string': ['error', { markupOnly: true }], // правило для строк, что они проходят через систему интернационализации(били в переводе на всех языках)
    },
    // Определяет глобальные переменные, которые будут доступны в вашем коде.
    globals: {
        __IS_DEV__: true, // Указывает, что глобальная переменная __IS_DEV__ доступна
    },
};
